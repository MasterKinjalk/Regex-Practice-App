Kinjalk Parth | PT-2 | Research Proposal
Proposal:
This proposal aims to explore innovative approaches for optimizing space amplification in
RocksDB and MyRocks by dynamically adjusting strategies based on workloads, investigating
alternative LSM-tree designs, integrating with newer compression algorithms, and addressing
multi-tenant scenarios. Through this comprehensive approach, we will achieve significant
improvements in storage efficiency, performance, and scalability.
Summary of Selected Papers:
MyRocks[1]: This paper describes MyRocks, a new MySQL storage engine built on top of
RocksDB, an LSM-tree-based key/value store. MyRocks was developed by Facebook to address
the scalability challenges of its social graph database. By leveraging the efficiency of RocksDB,
MyRocks was able to achieve significant reductions in storage space, write amplification, and
instance size. Additionally, MyRocks benefited from all of the existing MySQL features and
tools, making the transition from InnoDB to MyRocks transparent to client applications.
Optimizations in RocksDB[2]: This paper investigates space amplification in RocksDB, a
high-performance key-value storage engine. Space amplification refers to the phenomenon
where the amount of data stored on disk is significantly higher than the amount of data that is
written. The paper identifies several factors that contribute to space amplification in RocksDB
and proposes several strategies for reducing it.
Motivation and Inspiration for selecting this topic:
The motivation for exploring optimizing space amplification and MyRocks stems from the
increasing demand for efficient and scalable storage solutions for large-scale applications. As
data volumes continue to grow, particularly in domains like social media, e-commerce, and
cloud computing, efficient storage utilization becomes paramount. With the switch from rotating
disks to flash-based storage new techniques are required that can leverage the index-based
read-write that they offer.
This topic is crucial due to its direct impact on reducing storage costs, improving overall system
performance, facilitating scalability, and freeing up valuable resources for critical operations.
Optimizing space amplification not only leads to substantial cost savings for organizations
dealing with extensive datasets but also enhances the efficiency and agility of systems by
minimizing wasted storage space and allowing for more effective resource allocation.
Apart from this companies like Netflix use RocksDB on AWS to cache application data, Uber
uses it as a durable and scalable task queue and even Microsoft Bing uses it as a storage engine.
This inspired me to read about it and if possible contribute to the field.
Existing Work Related to the Proposed Plan:
Zhang et al. (2018)[1]: This paper explores the use of tiered LSM-trees for reducing space
amplification in RocksDB. This work demonstrates the potential of alternative LSM-tree designs
for improving space efficiency.
Yang et al. (2019)[3]: This paper investigates the integration of compression algorithms with
RocksDB to further reduce space amplification. This work highlights the potential for
space-efficient compression techniques.
Kinjalk Parth | PT-2 | Research Proposal
Facebook Engineering blog[6]: This blog post details Facebook's ongoing development and
optimization of MyRocks for their MySQL workloads. This work showcases the practical
applications and ongoing advancements in MyRocks implementation.
Wang et al. (2019)[5]: This paper analyzes the performance and scalability of MyRocks
compared to InnoDB, focusing on transaction throughput and latency. This work provides
valuable insights into MyRocks' suitability for different types of workloads.
The Novelty of the Proposal:
This plan innovates by dynamically adjusting optimizations, exploring alternative LSM-tree
designs beyond tiered LSM-trees, and integrating newer compression algorithms. Additionally,
it addresses multi-tenant needs for isolating tenant resources and managing space amplification
effectively. The unique aspect lies in the comprehensive combination of these strategies, which,
to the best knowledge of the author, haven't been used together before for enhancing a database.
The approach also involves performing cost-benefit analyses to guide practical implementations
and ensure optimal resource allocation.
Research Questions:
RQ1: How effective are dynamic bloom filter and compaction strategies compared to static
configurations in reducing space amplification and improving performance under different
workload characteristics?
RQ2: Can alternative storage engine architectures, beyond LSM-trees, provide better
performance and scalability for MyRocks under specific workload scenarios?
RQ3: What is the impact of integrating different compression algorithms on space amplification
and performance in RocksDB, and how can we optimize the trade-offs between space efficiency
and compression overhead?
RQ4: How can we effectively manage space amplification in multi-tenant scenarios within
RocksDB and MyRocks to ensure fairness and resource efficiency for different tenants?
RQ5: What is the cost-benefit analysis of different space amplification reduction techniques in
MyRocks, considering storage costs, performance overhead, and resource utilization?
Plan to Answer The Research Questions:
To answer these questions, a combination of theoretical analysis, system design and
implementation, and empirical evaluation would be needed. For instance, theoretical analysis
could be used to understand the trade-offs of different LSM-tree designs or compaction
strategies. System design and implementation would be needed to integrate new strategies or
algorithms into RocksDB or MyRocks. Empirical evaluation would involve running various
workloads on the modified systems and measuring key metrics such as space usage, throughput,
latency, and CPU utilization. Data collection would involve running these experiments under
different configurations and workloads and collecting detailed performance and resource usage
data. The results would then be analyzed to draw conclusions about the effectiveness of the
proposed techniques.
Kinjalk Parth | PT-2 | Research Proposal
References:
1. Zhang, Y., Jiang, S., & Li, K. (2018, April). Tiered LSM-tree: A space-efficient
LSM-tree variant for RocksDB. In Proceedings of the 18th ACM International
Symposium on Mobile Ad Hoc Networking and Computing (pp. 148-156).
2. Dong, J., Zhou, S., & Li, K. (2017, June). Optimizing space amplification in RocksDB.
In Proceedings of the 10th ACM International Conference on Distributed and
Event-Based Systems (pp. 82-93).
3. Yang, Y., Zhou, S., & Li, K. (2019). Utilizing compression algorithms for space
amplification in RocksDB. arXiv preprint arXiv:1902.01874.
4. Matsunobu, S., Endo, Y., Takeda, H., Yoshida, K., & Inoue, T. (2016, November).
MyRocks: A space-and write-optimized MySQL database. In Proceedings of the VLDB
Endowment (Vol. 13, No. 5, pp. 3217-3232).
5. Wang, J., Wu, Y., & Li, J. (2019, May). An empirical study of MyRocks: A
RocksDB-based MySQL storage engine. In 2019 International Conference on Big Data
(BigData) (pp. 301-310). IEEE.
6. https://engineering.fb.com/2013/11/21/core-infra/
7. https://rocksdb.org/blog/2021/12/29/ribbon-filter.html
8. Tuning MyRocks for performance (minervadb.com)
9. https://doi.org/10.48550/arXiv.2307.16693
10. Increase write throughput on Amazon RDS for MariaDB using the MyRocks storage
engine | AWS Database Blog
11. https://github.com/facebook/rocksdb/blob/main/USERS.md
12. https://blogs.bing.com/Engineering-Blog/october-2021/RocksDB-in-Microsoft-Bing
